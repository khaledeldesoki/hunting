{
    "name": "Bug Bounty Hunting Environment",
    "build": {
        "dockerfile": "Dockerfile",
        "context": "."
    },
    "customizations": {
        "vscode": {
            "settings": {
                "terminal.integrated.shell.linux": "/bin/bash",
                "terminal.integrated.fontSize": 14,
                "workbench.colorTheme": "Default Dark+",
                "editor.minimap.enabled": false,
                "files.autoSave": "afterDelay"
            },
            "extensions": [
                "ms-vscode.cpptools",
                "ms-python.python",
                "ms-vscode.vscode-json",
                "redhat.vscode-yaml",
                "streetsidesoftware.code-spell-checker",
                "ms-vscode.hexeditor"
            ]
        }
    },
    "remoteUser": "root",
    "postCreateCommand": "chmod +x /workspace/scripts/*.sh && echo '🎯 Bug bounty environment setup complete! Run bb_toolkit.sh to get started.'",
    "features": {
        "ghcr.io/devcontainers/features/git:1": {},
        "ghcr.io/devcontainers/features/common-utils:2": {
            "installZsh": true,
            "configureZshAsDefaultShell": false,
            "installOhMyZsh": true
        }
    },
    "forwardPorts": [8080, 8000, 3000, 5000, 9001],
    "portsAttributes": {
        "8080": {
            "label": "Web Server",
            "onAutoForward": "notify"
        },
        "9001": {
            "label": "Burp Proxy",
            "onAutoForward": "silent"
        }
    },
    "mounts": [
        "source=bb-tools-cache,target=/root/go,type=volume",
        "source=bb-wordlists-cache,target=/workspace/wordlists,type=volume"
    ]
}

# ================================
# Create scripts directory structure
# ================================

# scripts/quick_recon.sh
#!/bin/bash
if [ $# -eq 0 ]; then
    echo "Usage: $0 <domain>"
    exit 1
fi

DOMAIN=$1
mkdir -p results/$DOMAIN

echo "[+] Starting quick reconnaissance for $DOMAIN"
echo "[+] Running subfinder..."
subfinder -d $DOMAIN -o results/$DOMAIN/subdomains.txt

echo "[+] Running assetfinder..."
assetfinder --subs-only $DOMAIN >> results/$DOMAIN/subdomains.txt

echo "[+] Removing duplicates..."
sort -u results/$DOMAIN/subdomains.txt -o results/$DOMAIN/subdomains.txt

echo "[+] Probing for live hosts..."
cat results/$DOMAIN/subdomains.txt | httpx -o results/$DOMAIN/live_hosts.txt

echo "[+] Taking screenshots..."
if [ -s results/$DOMAIN/live_hosts.txt ]; then
    cat results/$DOMAIN/live_hosts.txt | aquatone -out results/$DOMAIN/aquatone
fi

echo "[+] Quick reconnaissance completed! Results saved in results/$DOMAIN/"

# ================================
# scripts/deep_recon.sh
#!/bin/bash
if [ $# -eq 0 ]; then
    echo "Usage: $0 <domain>"
    exit 1
fi

DOMAIN=$1
mkdir -p results/$DOMAIN/{subdomains,urls,js,nuclei,endpoints,ports}

echo "[+] Starting deep reconnaissance for $DOMAIN"

# Subdomain enumeration
echo "[+] Running multiple subdomain enumeration tools..."
subfinder -d $DOMAIN -o results/$DOMAIN/subdomains/subfinder.txt
assetfinder --subs-only $DOMAIN > results/$DOMAIN/subdomains/assetfinder.txt
if command -v amass &> /dev/null; then
    amass enum -passive -d $DOMAIN -o results/$DOMAIN/subdomains/amass.txt
fi

# Combine and deduplicate
cat results/$DOMAIN/subdomains/*.txt | sort -u > results/$DOMAIN/subdomains/all_subdomains.txt

# Probe for live hosts
echo "[+] Probing for live hosts..."
cat results/$DOMAIN/subdomains/all_subdomains.txt | httpx -ports 80,443,8080,8443,3000,5000,8000,9000 -o results/$DOMAIN/live_hosts.txt

# Port scanning
echo "[+] Running port scan on live hosts..."
if command -v naabu &> /dev/null; then
    naabu -l results/$DOMAIN/live_hosts.txt -o results/$DOMAIN/ports/open_ports.txt
fi

# URL gathering
echo "[+] Gathering URLs..."
if [ -s results/$DOMAIN/live_hosts.txt ]; then
    cat results/$DOMAIN/live_hosts.txt | gau > results/$DOMAIN/urls/gau.txt
    cat results/$DOMAIN/live_hosts.txt | waybackurls > results/$DOMAIN/urls/wayback.txt
    cat results/$DOMAIN/urls/*.txt | sort -u > results/$DOMAIN/urls/all_urls.txt
fi

# JavaScript file discovery
echo "[+] Finding JavaScript files..."
if [ -s results/$DOMAIN/urls/all_urls.txt ]; then
    cat results/$DOMAIN/urls/all_urls.txt | grep -E "\.js$" > results/$DOMAIN/js/js_files.txt
    cat results/$DOMAIN/live_hosts.txt | getJS --complete > results/$DOMAIN/js/getjs_output.txt
fi

# Nuclei scanning
echo "[+] Running Nuclei scans..."
if [ -s results/$DOMAIN/live_hosts.txt ]; then
    nuclei -l results/$DOMAIN/live_hosts.txt -o results/$DOMAIN/nuclei/vulnerabilities.txt
fi

# Screenshots
echo "[+] Taking screenshots..."
if [ -s results/$DOMAIN/live_hosts.txt ]; then
    cat results/$DOMAIN/live_hosts.txt | aquatone -out results/$DOMAIN/aquatone
fi

echo "[+] Deep reconnaissance completed! Results saved in results/$DOMAIN/"
echo "[+] Summary:"
echo "    Subdomains found: $(wc -l < results/$DOMAIN/subdomains/all_subdomains.txt)"
echo "    Live hosts: $(wc -l < results/$DOMAIN/live_hosts.txt)"
if [ -f results/$DOMAIN/urls/all_urls.txt ]; then
    echo "    URLs gathered: $(wc -l < results/$DOMAIN/urls/all_urls.txt)"
fi
if [ -f results/$DOMAIN/js/js_files.txt ]; then
    echo "    JavaScript files: $(wc -l < results/$DOMAIN/js/js_files.txt)"
fi

# ================================
# scripts/bb_toolkit.sh
#!/bin/bash

echo "🔍 Bug Bounty Toolkit - Choose your weapon:"
echo "1. Quick Recon (subfinder + httpx + aquatone)"
echo "2. Deep Recon (comprehensive enumeration)"
echo "3. Parameter Discovery"
echo "4. XSS Testing"
echo "5. Directory Bruteforce"
echo "6. Nuclei Vulnerability Scan"
echo "7. JavaScript Analysis"
echo "8. CORS Testing"
echo "9. JWT Analysis"
echo "10. SQL Injection Test"
echo "11. Cloud Storage Scanner"
echo "12. Git Secrets Scanner"
echo "13. Show All Tools"

read -p "Enter your choice (1-13): " choice

case $choice in
    1)
        read -p "Enter domain: " domain
        quick_recon.sh $domain
        ;;
    2)
        read -p "Enter domain: " domain
        deep_recon.sh $domain
        ;;
    3)
        read -p "Enter URL: " url
        param_discovery.sh $url
        ;;
    4)
        read -p "Enter URLs file path: " urls_file
        xss_test.sh $urls_file
        ;;
    5)
        read -p "Enter URL: " url
        read -p "Choose wordlist (1=common, 2=big, 3=directory-list-2.3): " wl_choice
        case $wl_choice in
            1) wordlist="/workspace/wordlists/SecLists/Discovery/Web-Content/common.txt" ;;
            2) wordlist="/workspace/wordlists/SecLists/Discovery/Web-Content/big.txt" ;;
            3) wordlist="/workspace/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt" ;;
            *) wordlist="/workspace/wordlists/SecLists/Discovery/Web-Content/common.txt" ;;
        esac
        ffuf -w $wordlist -u $url/FUZZ -c
        ;;
    6)
        read -p "Enter target (URL or file): " target
        nuclei -target $target -severity medium,high,critical
        ;;
    7)
        read -p "Enter domain: " domain
        getJS --complete --url $domain
        ;;
    8)
        read -p "Enter URLs file: " urls_file
        python3 /workspace/tools/CORScanner/cors_scan.py -i $urls_file
        ;;
    9)
        read -p "Enter JWT token: " token
        python3 /workspace/tools/jwt_tool/jwt_tool.py $token
        ;;
    10)
        read -p "Enter URL: " url
        sqlmap -u "$url" --batch --level=2 --risk=2
        ;;
    11)
        read -p "Enter company name: " company
        python3 /workspace/tools/cloud_enum/cloud_enum.py -k $company
        ;;
    12)
        read -p "Enter GitHub URL or local directory: " target
        if [[ $target == https://github.com/* ]]; then
            /workspace/tools/truffleHog/truffleHog git $target
        else
            /workspace/tools/truffleHog/truffleHog filesystem $target
        fi
        ;;
    13)
        echo ""
        echo "🛠️  Available Tools:"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Subdomain Enumeration:"
        echo "  • subfinder, assetfinder, amass, sublist3r"
        echo ""
        echo "Web Probing & Analysis:"
        echo "  • httpx, httprobe, aquatone, wafw00f"
        echo ""
        echo "URL & Endpoint Discovery:"
        echo "  • gau, waybackurls, gospider, katana, hakrawler"
        echo ""
        echo "Vulnerability Scanning:"
        echo "  • nuclei, nikto, sqlmap, naabu"
        echo ""
        echo "Fuzzing & Discovery:"
        echo "  • ffuf, gobuster, dirb, wfuzz"
        echo ""
        echo "Parameter Discovery:"
        echo "  • arjun, paramspider"
        echo ""
        echo "XSS Testing:"
        echo "  • dalfox, xsstrike, airixss"
        echo ""
        echo "JavaScript Analysis:"
        echo "  • getJS, linkfinder, subjs"
        echo ""
        echo "Specialized Testing:"
        echo "  • jwt_tool (JWT), cors_scan (CORS), ssrfmap (SSRF)"
        echo "  • nosqlmap (NoSQL), cloud_enum (Cloud), s3scanner (S3)"
        echo ""
        echo "Secret Scanning:"
        echo "  • truffleHog, gitdorker"
        echo ""
        echo "Custom Scripts:"
        echo "  • quick_recon.sh, deep_recon.sh, param_discovery.sh"
        echo "  • xss_test.sh, bb_toolkit.sh"
        echo ""
        echo "Wordlists:"
        echo "  • SecLists: /workspace/wordlists/SecLists/"
        echo "  • PayloadsAllTheThings: /workspace/wordlists/PayloadsAllTheThings/"
        echo "  • FuzzDB: /workspace/wordlists/fuzzdb/"
        ;;
    *)
        echo "Invalid choice"
        ;;
esac

# ================================
# scripts/param_discovery.sh
#!/bin/bash
if [ $# -eq 0 ]; then
    echo "Usage: $0 <url>"
    exit 1
fi

URL=$1
DOMAIN=$(echo $URL | sed 's/https\?:\/\///' | cut -d'/' -f1)
mkdir -p results/$DOMAIN/parameters

echo "[+] Discovering parameters for $URL"

# Arjun parameter discovery
echo "[+] Running Arjun..."
cd /workspace/tools/Arjun
python3 arjun.py -u $URL -o /workspace/results/$DOMAIN/parameters/arjun.txt

# ParamSpider
echo "[+] Running ParamSpider..."
cd /workspace/tools/ParamSpider
python3 paramspider.py --domain $DOMAIN --output /workspace/results/$DOMAIN/parameters/paramspider.txt

echo "[+] Parameter discovery completed!"

# ================================
# scripts/xss_test.sh
#!/bin/bash
if [ $# -eq 0 ]; then
    echo "Usage: $0 <urls_file>"
    exit 1
fi

URLS_FILE=$1
DOMAIN=$(basename $URLS_FILE .txt)
mkdir -p results/$DOMAIN/xss

echo "[+] Testing for XSS vulnerabilities..."

# Using dalfox
echo "[+] Running dalfox..."
cat $URLS_FILE | dalfox pipe --output results/$DOMAIN/xss/dalfox.txt

# Using XSStrike
echo "[+] Running XSStrike on URLs with parameters..."
cat $URLS_FILE | grep "=" | head -10 | while read url; do
    echo "Testing: $url"
    python3 /workspace/tools/XSStrike/xsstrike.py -u "$url" --crawl >> results/$DOMAIN/xss/xsstrike.txt 2>/dev/null
done

echo "[+] XSS testing completed!"

# ================================
# scripts/install_tools.sh
#!/bin/bash
echo "🔧 Installing additional tools..."

# Install any missing Go tools
echo "[+] Ensuring Go tools are installed..."
go install -v github.com/tomnomnom/assetfinder@latest 2>/dev/null
go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest 2>/dev/null
go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest 2>/dev/null
go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest 2>/dev/null

# Update nuclei templates
echo "[+] Updating Nuclei templates..."
nuclei -update-templates

echo "[+] Tool installation completed!"

# ================================
# scripts/setup_environment.sh
#!/bin/bash
echo "🚀 Setting up bug bounty environment..."

# Create directory structure
mkdir -p /workspace/{results,targets,reports,configs}

# Set permissions
chmod +x /workspace/scripts/*.sh

# Add to PATH
echo 'export PATH=$PATH:/workspace/scripts:/workspace/tools' >> ~/.bashrc

# Create useful aliases
echo 'alias hunt="cd /workspace"' >> ~/.bashrc
echo 'alias results="cd /workspace/results"' >> ~/.bashrc
echo 'alias tools="ls /workspace/tools"' >> ~/.bashrc

echo "✅ Environment setup completed!"